---
format: 
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
echo: false
params:
  depth_m: 14
  start_val: 2020
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false

library(air2wateR)
library(data.table)
library(dplyr)
library(DT)
library(ggplot2)
library(here)
library(plotly)
library(readr)
library(stringr)
library(tidyr)

theme_set(theme_light())

dt_options <- list(
  dom = 'ft',
  paging = FALSE,
  searching = TRUE,
  scrollX = "500px",
  columnDefs = list(list(className = 'dt-center', targets = "_all"))
)

lake <- "pockwock"
depth_m <- params$depth_m
start_val <- params$start_val

#########################################################################
## this copy and pastes the input.txt and PSO.txt files from input_files
## to the current sim folder
## **** to increase the number of simulations, change  # nrun in input.txt
input_files <- list.files(here("sim_folder/input_files"), full.names = TRUE)
sim_path <- paste0(here("sim_folder"), "/sim_", depth_m, "_", start_val)
sim_path_lake <- paste0(sim_path, "/", lake)

if(!dir.exists(sim_path)) dir.create(sim_path)

if(!dir.exists(sim_path_lake)) dir.create(sim_path_lake)

file.copy(input_files, sim_path)
########################################################################

# read in data and assign calibration and validation
dat <- fread(here("data/8200574_NS01DL0009_data.csv")) %>% 
  mutate(
    file_type = if_else(year_ast >= start_val, "validation", "calibration")
  )

# cc file
dat %>% 
  filter(file_type == "calibration") %>% 
  select(-c(file_type, date_ast)) %>% 
  fwrite(
    paste0(sim_path, "/", lake, "/8200574_NS01DL0009_cc.txt"), col.names = FALSE
  )

# cv file
dat %>% 
  filter(file_type == "validation") %>% 
  select(-c(file_type, date_ast)) %>% 
  fwrite(
    paste0(sim_path, "/", lake, "/8200574_NS01DL0009_cv.txt"), col.names = FALSE
  )

# generate params (writes to /sportfish_ccv_temperature_model/sim_folder/current_folder/lake/parameters.txt)
gen_param(sim_path, mean_depth = depth_m)

# Run the model
run_air2water(sim_folder = sim_path, mode = "pso")

# model output
out <- get_outputs(sim_folder = sim_path) %>% 
  select(
    timestamp_ast = datetime,
    air_temperature = AT,
    observed_water_temperature = LSWT_obs,
    simulated_water_temperature = LSWT_sim,
    C,
    status
  ) 

out_long <- out %>% 
  pivot_longer(
    cols = contains("temperature"), values_to = "value",
    names_to = "variable"
  )
```

# Air Temperature to Water Temperature Model for Pockwock Lake

`r Sys.Date()`

- Results from the [`air2wateR`](https://github.com/aemon-j/air2wateR) model.
- Air temperature data from the Bedford Range station from the [Government of Canada](https://collaboration.cmc.ec.gc.ca/cmc/climate/Get_More_Data_Plus_de_donnees).
- Water temperature data from the [Surface Water Quality Monitoring Network Continuous Water Quality Data database](https://data.novascotia.ca/Nature-and-Environment/Surface-Water-Quality-Monitoring-Network-Continuou/bkfi-mjgw/about_data)

Average lake depth: `r params$depth_m` m

## Temperature Data

```{r}
#| warning: false
#| fig-height: 5.5

p <- out_long %>% 
  filter(variable != "simulated_water_temperature") %>% 
  ggplot(aes(timestamp_ast, value, color = status)) +
  geom_point(size = 0.5) +
  scale_color_manual(values = c("#D95F02", "#7570B3")) +
  ylab('Temperature (\u00B0C)') +
  facet_wrap(~variable, ncol = 1, scales = "free") +
  theme(axis.title.x = element_blank())

ggplotly(p)
```


## Model Parameters

Red dot indicates smallest RMSE.

```{r}
#| fig-height: 5

plot_param(sim_folder = sim_path) +
  ylab('RMSE (\u00B0C)') 
```

## Simulated vs. Observed Water Temperature

::: panel-tabset 
### Time Series
```{r}
#| warning: false
#| fig-height: 5.5

# p <- ggplot(out) +
#   geom_line(
#     aes(timestamp_ast, simulated_water_temperature, colour = 'Simulated'), linewidth = 0.75
#   ) +
#   geom_point(
#     aes(timestamp_ast, observed_water_temperature, colour = 'Observed'), size = 0.75
#   ) +
#   scale_color_manual(
#     "Water\nTemperature", values = c("#1B9E77", "#E7298A")
#   ) +
#   ylab('Temperature (\u00B0C)') +
#   facet_wrap(~status, nrow = 2, scales = "free_x") +
#   theme(axis.title.x = element_blank())

p <- out_long %>% 
  mutate(
    variable = str_remove(variable, "_temperature"),
    variable = str_replace(variable, "_", " "),
    variable = str_to_title(variable)
  ) %>% 
  ggplot(aes(timestamp_ast, value, col = variable)) +
  geom_line() +
  scale_color_manual(
    "Temperature", values = c("darkgrey", "#1B9E77", "#E7298A")
  ) +
  ylab('Temperature (\u00B0C)') +
  facet_wrap(~status, nrow = 2, scales = "free_x") +
  theme(axis.title.x = element_blank())

ggplotly(p)
```

### Correlation

Grey line shows the 1:1 line.

```{r}
#| warning: false
#| fig-height: 5.5

p <- ggplot(out, aes(observed_water_temperature, simulated_water_temperature)) +
  geom_point(col = "#7570B3") +
  geom_abline(slope = 1, intercept = 0, col = "darkgrey", linewidth = 1.5) +
  facet_wrap(~status, nrow = 2) +
  theme(panel.spacing.y = unit(2, "lines"))

ggplotly(p)
```
:::

::: panel-tabset 

## Model Fit

```{r}
#| message: false

tss <- out %>% 
  pivot_longer(
    cols = contains("temperature"), values_to = "value",
    names_to = "variable") %>% 
  group_by(variable, status) %>% 
  mutate(
    sample_mean = mean(value, na.rm = TRUE),
    diff_squared = (value - sample_mean)^2
  ) %>% 
  summarise(
    tss = sum(diff_squared, na.rm = TRUE)
  )

fit <- out %>% 
  group_by(status) %>% 
  mutate(
    squared_error = 
      (observed_water_temperature - simulated_water_temperature)^2 
  ) %>% 
  summarise(
    sse = sum(squared_error, na.rm = TRUE),
    mse = mean(squared_error, na.rm = TRUE)
  ) %>% 
  ungroup() %>% 
  left_join(
    filter(tss, variable == "observed_water_temperature"), 
    by = join_by(status)
  ) %>% 
  mutate(
    rmse = sqrt(mse),
    r2 = 1 - sse / tss,
    
    across(.cols = where(is.numeric), .fns = ~round(.x, digits = 2))
  ) %>% 
  select(status, tss, sse, mse, rmse, r2)

fit %>% 
  datatable(options = dt_options, rownames = FALSE)

```

## Model Inputs

```{r}
#| warning: false

read_delim(paste0(sim_path, "/input.txt"), delim = "\t") %>% 
  select(inputs = 1) %>% 
  separate(inputs, into = c("value", "input type"), sep = "\\#") %>% 
  datatable(
    rownames = FALSE,
    options = list(
      dom = 'ft',
      paging = FALSE,
      searching = TRUE,
      scrollY = "500px",
      scrollX = "500px",
      columnDefs = list(list(className = 'dt-left', targets = "_all"))
    ))
```
:::
